name: Eja

on: [push, pull_request]

jobs:

  testsr3:
    name: Tests-Rebar3
    strategy:
      fail-fast: false
      matrix:
        otp: [25, 26, 27]
        elixir: ['1.17']
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout ejabberd
      uses: actions/checkout@v4
      with:
        repository: processone/ejabberd

    - uses: actions/checkout@v4
      with:
        path: _checkouts/fast_xml

    - name: Get specific Erlang/OTP
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}

    - run: ./rebar3 unlock fast_xml

    - name: Prepare libraries
      run: |
        sudo apt-get -qq update
        sudo apt-get -y purge libgd3 nginx
        sudo apt-get -qq install libexpat1-dev libgd-dev libpam0g-dev \
                                 libsqlite3-dev libwebp-dev libyaml-dev

    - name: Prepare rebar
      id: rebar
      run: |
        echo '{xref_ignores, [{eldap_filter_yecc, return_error, 2},
                              {fusco_lib, split_credentials, 1},
                              {http_uri, encode, 1},
                              {http_uri, decode, 1}
                             ]}.' >>rebar.config
        echo '{ct_extra_params, "-verbosity 20"}.' >>rebar.config

    - name: Remove syntax_tools from release
      run: sed -i 's|, syntax_tools||g' src/ejabberd.app.src.script

    - name: Compile
      run: |
        ./autogen.sh
        ./configure --with-rebar=./rebar3 \
                    --prefix=/tmp/ejabberd \
                    --enable-all \
                    --disable-elixir \
                    --disable-mssql \
                    --disable-odbc
        make

    - name: Start ejabberd
      run: |
        echo "CONTRIB_MODULES_PATH=`pwd`/.ejabberd-modules" >> ejabberdctl.cfg.example
        CTL=_build/dev/rel/ejabberd/bin/ejabberdctl
        make dev
        $CTL start
        $CTL started
        $CTL stop
        $CTL stopped

    - run: make hooks
    - run: make options
    - run: make xref
    - run: make dialyzer

    - name: Run tests
      id: ct
      run: |
        (cd priv && ln -sf ../sql)
        sed -i -e 's/ct:pal/ct:log/' test/suite.erl
        CT_BACKENDS=mnesia ./rebar3 ct

    - name: Check results
      if: always() && (steps.ct.outcome != 'skipped' || steps.ct2.outcome != 'skipped')
      id: ctresults
      run: |
        [[ -d _build ]] && ln -s _build/test/logs/last/ logs || true
        ln `find logs/ -name suite.log` logs/suite.log
        grep 'TEST COMPLETE' logs/suite.log
        grep -q 'TEST COMPLETE,.* 0 failed' logs/suite.log
        test $(find logs/ -empty -name error.log)

    - name: View logs failures
      if: failure() && steps.ctresults.outcome == 'failure'
      run: |
        cat logs/suite.log | awk \
          'BEGIN{RS="\n=case";FS="\n"} /=result\s*failed/ {print "=case" $0}'
        find logs/ -name error.log -exec cat '{}' ';'
        find logs/ -name exunit.log -exec cat '{}' ';'

  testsr3elixir:
    name: Tests-Rebar3-Elixir
    strategy:
      fail-fast: false
      matrix:
        otp: [25, 26, 27]
        elixir: ['1.17']
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout ejabberd
      uses: actions/checkout@v4
      with:
        repository: processone/ejabberd

    - uses: actions/checkout@v4
      with:
        path: _checkouts/fast_xml

    - name: Get specific Erlang/OTP
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir}}

    - run: ./rebar3 unlock fast_xml

    - name: Prepare libraries
      run: |
        sudo apt-get -qq update
        sudo apt-get -y purge libgd3 nginx
        sudo apt-get -qq install libexpat1-dev libgd-dev libpam0g-dev \
                                 libsqlite3-dev libwebp-dev libyaml-dev

    - name: Prepare rebar
      id: rebar
      run: |
        echo '{xref_ignores, [{eldap_filter_yecc, return_error, 2},
                              {fusco_lib, split_credentials, 1},
                              {http_uri, encode, 1},
                              {http_uri, decode, 1}
                             ]}.' >>rebar.config
        echo '{ct_extra_params, "-verbosity 20"}.' >>rebar.config

    - name: Remove syntax_tools from release
      run: sed -i 's|, syntax_tools||g' src/ejabberd.app.src.script

    - name: Compile
      run: |
        ./autogen.sh
        ./configure --with-rebar=./rebar3 \
                    --prefix=/tmp/ejabberd \
                    --enable-all \
                    --disable-mssql
        make

    - name: Start ejabberd
      run: |
        echo "CONTRIB_MODULES_PATH=`pwd`/.ejabberd-modules" >> ejabberdctl.cfg.example
        CTL=_build/dev/rel/ejabberd/bin/ejabberdctl
        make dev
        $CTL start
        $CTL started
        $CTL stop
        $CTL stopped

    - run: make hooks
    - run: make options
    - run: make xref
    - run: make dialyzer

    - name: Run tests
      id: ct
      run: |
        (cd priv && ln -sf ../sql)
        sed -i -e 's/ct:pal/ct:log/' test/suite.erl
        CT_BACKENDS=mnesia ./rebar3 ct

    - name: Check results
      if: always() && (steps.ct.outcome != 'skipped' || steps.ct2.outcome != 'skipped')
      id: ctresults
      run: |
        [[ -d _build ]] && ln -s _build/test/logs/last/ logs || true
        ln `find logs/ -name suite.log` logs/suite.log
        grep 'TEST COMPLETE' logs/suite.log
        grep -q 'TEST COMPLETE,.* 0 failed' logs/suite.log
        test $(find logs/ -empty -name error.log)

    - name: View logs failures
      if: failure() && steps.ctresults.outcome == 'failure'
      run: |
        cat logs/suite.log | awk \
          'BEGIN{RS="\n=case";FS="\n"} /=result\s*failed/ {print "=case" $0}'
        find logs/ -name error.log -exec cat '{}' ';'
        find logs/ -name exunit.log -exec cat '{}' ';'

  testsmix:
    name: Tests-Mix
    strategy:
      fail-fast: false
      matrix:
        otp: [25, 26, 27]
        elixir: ['1.17']
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout ejabberd
      uses: actions/checkout@v4
      with:
        repository: processone/ejabberd

    - uses: actions/checkout@v4
      with:
        path: deps/fast_xml

    - name: Get specific Erlang/OTP
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir}}

    - run: mix deps.unlock fast_xml
    - run: |
        sed -i 's|{:fast_xml, .*},|{:fast_xml, path: "deps/fast_xml", override: true},|g' mix.exs

    - name: Prepare libraries
      run: |
        sudo apt-get -qq update
        sudo apt-get -y purge libgd3 nginx
        sudo apt-get -qq install libexpat1-dev libgd-dev libpam0g-dev \
                                 libsqlite3-dev libwebp-dev libyaml-dev

    - name: Prepare rebar
      id: rebar
      run: |
        echo '{xref_ignores, [{eldap_filter_yecc, return_error, 2},
                              {fusco_lib, split_credentials, 1},
                              {http_uri, encode, 1},
                              {http_uri, decode, 1}
                             ]}.' >>rebar.config
        echo '{ct_extra_params, "-verbosity 20"}.' >>rebar.config

    - name: Remove syntax_tools from release
      run: sed -i 's|, syntax_tools||g' src/ejabberd.app.src.script

    - name: Compile
      run: |
        ./autogen.sh
        ./configure --with-rebar=mix \
                    --prefix=/tmp/ejabberd \
                    --enable-all \
                    --disable-mssql
        make

    - name: Start ejabberd
      run: |
        echo "CONTRIB_MODULES_PATH=`pwd`/.ejabberd-modules" >> ejabberdctl.cfg.example
        CTL=_build/dev/rel/ejabberd/bin/ejabberdctl
        make dev
        $CTL start
        $CTL started
        $CTL stop
        $CTL stopped

    - run: make hooks
    - run: make options
    - run: make xref
    - run: make dialyzer
